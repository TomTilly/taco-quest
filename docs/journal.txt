--------------------------------------------------------------------------------
3/15/2025: Discord

Today:
- Tom T wrote a line with an ending curly brace (oh and packet_send())
- Justin had main.c use packet_send()
- Lag! fixed ? The main change was that we send messages and packet headers in a single net_send()
- Ideas about queueing inputs.

Next Time:
- Tom F is up !

--------------------------------------------------------------------------------
3/08/2025: Discord

Today:
- Debugged client latency. Justin turned client socket into non-blocking on windows. And removed net log statements when 0 bytes are sent/received.
- Justin changed before/after logging to just after
- ... windows network: set client to non-blocking
- Tom: mac network: set client to non-blocking
- ... make server listen for client input every frame

Next Time:
- Tom T is up.
- Lag!

--------------------------------------------------------------------------------
3/01/2025: Discord

Today:
- Justin refactored game loop server/client structure.
- Tom T added get_timestamp().
- Tom F removed dum net log format macros and replaced with equivalent
  functions.

Next Time:
- Check client disconnect assertion failure (net_destroy_socket) after server
  quits while client is still running.
- One possible change is to listen for client input every frame.
- Investigating lag using log files.

--------------------------------------------------------------------------------
2/23/2025: Discord

Today:
- Justin improves the network test harness in preparation for use in the game.
- Tom T copies packet library from net_packet_test.c to packet.c
- Tom F integrated packet lib into main

Next Time:
- Tom T starts (or Justin).
- Investigate lag (make a diagram?)

--------------------------------------------------------------------------------
2/15/2025: Discord

Today:
- We did a diagram to clarify how networking works
- Justin worked on the network packet receiving layer library in a test harness.

Next Time:
- Windows compiler bug?
- Move receive packet logic into a library which game.
- Integrate into game.

--------------------------------------------------------------------------------
2/08/2025: Discord

Today:
- Tom T added network log, we debugged a network issue around receiving 0 bytes while expecting a payload.
- Tom F made some wrappers around the network API for receiving messages.
- Justin T made a wrapper around those for tracking partial messages and packet vs payload state. This is still in progress.

Next Time:
- Justin continues on wrapper and replacement. Finishing this should solve the bug that the network log found.

--------------------------------------------------------------------------------
1/11/2025: Discord

Today:
- Tom F finished implementing the rest of the network interface for mac.

Next Time:
- Justin does windows net interface.

--------------------------------------------------------------------------------
12/13/2024: Discord

Past:
- Justin last made the windows build succeed, but it doesn't work in any way.

Today:
- Justin started by actually fixing windows code
- Tom T followed instructions from Tom F and Justin to begin implementing network platform layer

Future:
- Next up: Tom F
- Finish implementing network platform layer

Notes:
- We decided to implement the lowest level wrapper around the socket APIs as opposed to wrapping all of the network and game logic. Reasons:
    - We don't want to have to write the game logic for each platform
    - Reusability for future projects (potentially)
- Windows has special WSAStartup init code that's required
- Setting up client is identical on both platforms
- Setting up server only differs in setting socket to non-blocking
- Interface should handle would block stuff if you set the socket to non-blocking
- Provide conversion layer to provide errors to the user
- Ideas for interface
    - Move INVALID_SOCKET into interface
    - Unify socket type
    - Setup client socket function
        - Params: IP, port
    - Setup server socket function
        - Params: port, (blocking - maybe include later)
    - Send
        - Params: socket, pointer, size
        - Returns: sent, error
        - Basic and loop versions
    - Receive
        - Params: socket, pointer, size
        - Returns: received, error
        - Basic and loop versions
    - Close
    - Accept
        - Params: socket
        - Returns: unified socket, error
