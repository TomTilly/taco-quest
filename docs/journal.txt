--------------------------------------------------------------------------------
7/26/2025: In Person and over Discord since Tom T is sick

Today:
- Tom F created initial dev mode which allows pausing and stepping ticks forward
  manually.
- Tom T drew numbers on snake segments when dev mode is enabled.
- Justin allowed repositioning snakes in dev mode with the mouse.
- Pizza, wings, "salad" and ice cream and cookies and brownies and juice
  beverage from concentra were all delicious.

Next Time:
- Continue on constricting ?
- Other ideas for dev mode ?
- What happens when playing multiplayer and using dev mode ?
- More shenanigrams ?

--------------------------------------------------------------------------------
7/6/2025: Discord

Today:
- Justin's shenanigrams
- Justin fixed recursion-related constriction bug
- Justin improved constriction logic around pushing other snakes

Next Time:
- Continue refining snake pushing logic
- Beginning to work on crushing detection
- Play test constriction logic

--------------------------------------------------------------------------------
6/22/2025: Discord

Today:
- Justin and Tom worked on constriction logic

--------------------------------------------------------------------------------
6/15/2025: Discord

Today:
- Tom explained an alternate snake constriction method: segments move toward the
"center" (average coordinate of all segments).
    - problems: certain segment configurations don't easily move
    - what's the center is snake shape is complex.
- Justin diagramed constriction, pushing, collision, and squishing logic

Next Time:
- Symmetry in constricting logic
- Migrate test app
- Refactor constriction logic, prepping for pushing logic

--------------------------------------------------------------------------------
6/08/2025: In person, Chauncy Street

Today:
- Went to Shake Shack, did not order shakes.
- Diagramed constriction logic.
- Justin tweaked constriction system and fixed minor bugs.
- Play tested.

--------------------------------------------------------------------------------
5/31/2025: Discord

Today:
- We diagramed latency issue
- Justin started test framework to fix latency issue, then realized we were updating snake location before chomping, which was cause of apparent latency (though latency may still be an issue we want to solve at some point)
- Updated game update logic to perform chomp for all players, and then perform move for all players
- Looked at Tom F's sound branch.

Next Time:
- Get sound working for clients
- Game design experimentation.
    - Idea: chomping makes player's head vulernable to getting chomped. Player loses when their head is chomped
    - Idea: Cumulative number of tacos as a win condition

--------------------------------------------------------------------------------
5/26/2025: Discord

Today:
- Made level bigger and added inside map barriers
- Lots of tweaking mechanics
- 3 snake support over network
- Added text support
- Added game state transitions
- First experiment in win condition
- Justin wins first game by making himself invincible by "accident"

Next Time:
- Play a initial win condition branch a bit more and take notes
- Fix the problem where trying to chomp a particulr segment is challenging as the client but not the server
- Try other win condition ideas

--------------------------------------------------------------------------------
5/17/2025: Discord

Today:
- Tom F had the grown segment start at the head so that it stays relative to the tail
- Tom T added a chomp delay
- Justin cleaned up game snake update

Next Time:
- Tom F's Turn
- Try out a larger level with some obstacles
- Brainstorm and experiment with some goals/win conditions

--------------------------------------------------------------------------------
4/26/2025: Discord

Today:
- Tom F put together a segment-health-test branch, still a few changes to make
- Justin put together limit-chomp-count-test branch. Put notes about playtest in notes.txt

Next Time:
- Tom T's turn.
- Make changes to segment health test branch, playtest and put together notes.
  - chomp delay
  - damaged segment staying fixed to tail

--------------------------------------------------------------------------------
4/13/2025: In Person

Today:
- Tom T/Justin implemented snake chomping and turning the rest of the snake segment into tacos.
- Now collecting tacos and snipping snakes seems to have no meaning.

Next Time:
- Tom F's turn
- Play more and come up with ideas on how to give meaning. And motivate getting tacos.
  - Limitting chomps is an idea.

--------------------------------------------------------------------------------
4/05/2025: In Person

Today:
- Tom F created a snake sprite sheet
- Justin loaded the bitmap to draw the snake's head, body with straight and turned parts, and tail. Also added a grid.

Next Time:
- Tom T's turn !
- Maybe play the game a few times and take notes on
  - Interesting things that can happen
  - Ideas for game mechanics to try


--------------------------------------------------------------------------------
3/29/2025: Discord

Today:
- Tom F implemented snake action buffer
- Justin updated snake action buffer
- Movement feels much more responsive

Next Time:
- Potential ideas: refactor, create sprites, game design?

--------------------------------------------------------------------------------
3/15/2025: Discord

Today:
- Tom T wrote a line with an ending curly brace (oh and packet_send())
- Justin had main.c use packet_send()
- Lag! fixed ? The main change was that we send messages and packet headers in a single net_send()
- Ideas about queueing inputs.

Next Time:
- Tom F is up !

--------------------------------------------------------------------------------
3/08/2025: Discord

Today:
- Debugged client latency. Justin turned client socket into non-blocking on windows. And removed net log statements when 0 bytes are sent/received.
- Justin changed before/after logging to just after
- ... windows network: set client to non-blocking
- Tom: mac network: set client to non-blocking
- ... make server listen for client input every frame

Next Time:
- Tom T is up.
- Lag!

--------------------------------------------------------------------------------
3/01/2025: Discord

Today:
- Justin refactored game loop server/client structure.
- Tom T added get_timestamp().
- Tom F removed dum net log format macros and replaced with equivalent
  functions.

Next Time:
- Check client disconnect assertion failure (net_destroy_socket) after server
  quits while client is still running.
- One possible change is to listen for client input every frame.
- Investigating lag using log files.

--------------------------------------------------------------------------------
2/23/2025: Discord

Today:
- Justin improves the network test harness in preparation for use in the game.
- Tom T copies packet library from net_packet_test.c to packet.c
- Tom F integrated packet lib into main

Next Time:
- Tom T starts (or Justin).
- Investigate lag (make a diagram?)

--------------------------------------------------------------------------------
2/15/2025: Discord

Today:
- We did a diagram to clarify how networking works
- Justin worked on the network packet receiving layer library in a test harness.

Next Time:
- Windows compiler bug?
- Move receive packet logic into a library which game.
- Integrate into game.

--------------------------------------------------------------------------------
2/08/2025: Discord

Today:
- Tom T added network log, we debugged a network issue around receiving 0 bytes while expecting a payload.
- Tom F made some wrappers around the network API for receiving messages.
- Justin T made a wrapper around those for tracking partial messages and packet vs payload state. This is still in progress.

Next Time:
- Justin continues on wrapper and replacement. Finishing this should solve the bug that the network log found.

--------------------------------------------------------------------------------
1/11/2025: Discord

Today:
- Tom F finished implementing the rest of the network interface for mac.

Next Time:
- Justin does windows net interface.

--------------------------------------------------------------------------------
12/13/2024: Discord

Past:
- Justin last made the windows build succeed, but it doesn't work in any way.

Today:
- Justin started by actually fixing windows code
- Tom T followed instructions from Tom F and Justin to begin implementing network platform layer

Future:
- Next up: Tom F
- Finish implementing network platform layer

Notes:
- We decided to implement the lowest level wrapper around the socket APIs as opposed to wrapping all of the network and game logic. Reasons:
    - We don't want to have to write the game logic for each platform
    - Reusability for future projects (potentially)
- Windows has special WSAStartup init code that's required
- Setting up client is identical on both platforms
- Setting up server only differs in setting socket to non-blocking
- Interface should handle would block stuff if you set the socket to non-blocking
- Provide conversion layer to provide errors to the user
- Ideas for interface
    - Move INVALID_SOCKET into interface
    - Unify socket type
    - Setup client socket function
        - Params: IP, port
    - Setup server socket function
        - Params: port, (blocking - maybe include later)
    - Send
        - Params: socket, pointer, size
        - Returns: sent, error
        - Basic and loop versions
    - Receive
        - Params: socket, pointer, size
        - Returns: received, error
        - Basic and loop versions
    - Close
    - Accept
        - Params: socket
        - Returns: unified socket, error
